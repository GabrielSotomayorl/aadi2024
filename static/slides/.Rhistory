# Crear el gráfico con las líneas adicionales
ggplot(datos, aes(x = promedio_anios_escolaridad25_2017, y = brecha)) +
geom_point(color = "#0073C2", size = 3, alpha = 0.7) +  # Puntos más grandes y ligeramente transparentes
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE) +  # Línea de tendencia en negro
geom_vline(xintercept = mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'promedio_anios_escolaridad25_2017'
geom_hline(yintercept = mean_brecha, color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'brecha'
# Agregar líneas para el punto específico de Sierra Gorda
geom_segment(aes(x = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
xend = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
y = mean_brecha,
yend = prediccion_sierra_gorda),
color = "orange", linetype = "dashed", size = 1.2) +  # Línea del componente explicado
geom_segment(aes(x = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
xend = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
y = prediccion_sierra_gorda,
yend = punto_sierra_gorda$brecha),
color = "purple", linetype = "dashed", size = 1.2) +  # Línea del residuo
geom_point(data = punto_sierra_gorda, aes(x = promedio_anios_escolaridad25_2017, y = brecha),
color = "darkred", size = 4) +  # Resaltar el punto específico
labs(
x = "Promedio de Años de Escolaridad (2017)",
y = "Brecha Salarial de Género (%)",
title = "Relación entre Promedio de Años de Escolaridad y Brecha Salarial de Género"
) +
theme_minimal(base_size = 16) +  # Tamaño base de letra aumentado
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Título centrado, en negrita y más grande
axis.title = element_text(face = "bold", size = 14),               # Títulos de los ejes en negrita y más grandes
axis.text = element_text(color = "#333333", size = 12),            # Texto de los ejes más grande
panel.grid.major = element_line(color = "#e0e0e0"),                # Líneas de la cuadrícula mayor en gris claro
panel.grid.minor = element_blank()                                 # Elimina las líneas de la cuadrícula menor
)
datos <- readRDS("data/datos.rds") %>%
filter(brecha < 40 & brecha > -20 & !is.na(brecha))
library(ggplot2)
library(dplyr)
# Crear categorías de escolaridad para calcular medias condicionales
datos <- readRDS("data/datos.rds") %>%
filter(brecha<40 & brecha > -20 & !is.na(brecha))
datos <- datos %>%
mutate(escolaridad_cat = cut(promedio_anios_escolaridad25_2017,
breaks = seq(floor(min(promedio_anios_escolaridad25_2017, na.rm = TRUE)),
ceiling(max(promedio_anios_escolaridad25_2017, na.rm = TRUE)),
by = 1),
include.lowest = TRUE))
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
ggplot(datos, aes(x = promedio_anios_escolaridad25_2017, y = brecha)) +
geom_point(color = "#0073C2", size = 3, alpha = 0.7) +  # Puntos más grandes y ligeramente transparentes
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE) +  # Línea de tendencia en negro
geom_vline(xintercept = mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'promedio_anios_escolaridad25_2017'
geom_hline(yintercept = mean(datos$brecha, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'brecha'
labs(
x = "Promedio de Años de Escolaridad (2017)",
y = "Brecha Salarial de Género (%)",
title = "Relación entre Promedio de Años de Escolaridad y Brecha Salarial de Género"
) +
theme_minimal(base_size = 16) +  # Tamaño base de letra aumentado
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Título centrado, en negrita y más grande
axis.title = element_text(face = "bold", size = 14),               # Títulos de los ejes en negrita y más grandes
axis.text = element_text(color = "#333333", size = 12),            # Texto de los ejes más grande
panel.grid.major = element_line(color = "#e0e0e0"),                # Líneas de la cuadrícula mayor en gris claro
panel.grid.minor = element_blank()                                 # Elimina las líneas de la cuadrícula menor
)
# Calcular la media de brecha salarial
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
# Extraer el punto específico cuya brecha es igual a 31.13078
punto_sierra_gorda <- datos %>% filter(abs(brecha - 31.13078) < 0.001)
# Calcular el valor predicho para la escolaridad de ese punto
prediccion_sierra_gorda <- -16.451 + 2.852 * punto_sierra_gorda$promedio_anios_escolaridad25_2017
# Crear el gráfico con las líneas adicionales
ggplot(datos, aes(x = promedio_anios_escolaridad25_2017, y = brecha)) +
geom_point(color = "#0073C2", size = 3, alpha = 0.7) +  # Puntos más grandes y ligeramente transparentes
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE) +  # Línea de tendencia en negro
geom_vline(xintercept = mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'promedio_anios_escolaridad25_2017'
geom_hline(yintercept = mean_brecha, color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'brecha'
# Agregar líneas para el punto específico de Sierra Gorda
geom_segment(aes(x = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
xend = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
y = mean_brecha,
yend = prediccion_sierra_gorda),
color = "orange", linetype = "dashed", size = 1.2) +  # Línea del componente explicado
geom_segment(aes(x = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
xend = punto_sierra_gorda$promedio_anios_escolaridad25_2017,
y = prediccion_sierra_gorda,
yend = punto_sierra_gorda$brecha),
color = "purple", linetype = "dashed", size = 1.2) +  # Línea del residuo
geom_point(data = punto_sierra_gorda, aes(x = promedio_anios_escolaridad25_2017, y = brecha),
color = "darkred", size = 4) +  # Resaltar el punto específico
labs(
x = "Promedio de Años de Escolaridad (2017)",
y = "Brecha Salarial de Género (%)",
title = "Relación entre Promedio de Años de Escolaridad y Brecha Salarial de Género"
) +
theme_minimal(base_size = 16) +  # Tamaño base de letra aumentado
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Título centrado, en negrita y más grande
axis.title = element_text(face = "bold", size = 14),               # Títulos de los ejes en negrita y más grandes
axis.text = element_text(color = "#333333", size = 12),            # Texto de los ejes más grande
panel.grid.major = element_line(color = "#e0e0e0"),                # Líneas de la cuadrícula mayor en gris claro
panel.grid.minor = element_blank()                                 # Elimina las líneas de la cuadrícula menor
)
# Calcular los valores predichos para todos los puntos
datos <- datos %>%
mutate(prediccion = -16.451 + 2.852 * promedio_anios_escolaridad25_2017)
# Crear el gráfico con las líneas adicionales para todos los puntos
ggplot(datos, aes(x = promedio_anios_escolaridad25_2017, y = brecha)) +
geom_point(color = "#0073C2", size = 3, alpha = 0.7) +  # Puntos más grandes y ligeramente transparentes
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE) +  # Línea de tendencia en negro
geom_vline(xintercept = mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'promedio_anios_escolaridad25_2017'
geom_hline(yintercept = mean_brecha, color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'brecha'
# Agregar líneas para todos los puntos
geom_segment(aes(x = promedio_anios_escolaridad25_2017,
xend = promedio_anios_escolaridad25_2017,
y = mean_brecha,
yend = prediccion),
color = "orange", linetype = "dashed", size = 1.2) +  # Línea del componente explicado
geom_segment(aes(x = promedio_anios_escolaridad25_2017,
xend = promedio_anios_escolaridad25_2017,
y = prediccion,
yend = brecha),
color = "purple", linetype = "dashed", size = 1.2) +  # Línea del residuo
labs(
x = "Promedio de Años de Escolaridad (2017)",
y = "Brecha Salarial de Género (%)",
title = "Relación entre Promedio de Años de Escolaridad y Brecha Salarial de Género"
) +
theme_minimal(base_size = 16) +  # Tamaño base de letra aumentado
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Título centrado, en negrita y más grande
axis.title = element_text(face = "bold", size = 14),               # Títulos de los ejes en negrita y más grandes
axis.text = element_text(color = "#333333", size = 12),            # Texto de los ejes más grande
panel.grid.major = element_line(color = "#e0e0e0"),                # Líneas de la cuadrícula mayor en gris claro
panel.grid.minor = element_blank()                                 # Elimina las líneas de la cuadrícula menor
)
mean(datos$promedio_anios_escolaridad25_2017)
mean(datos$brecha)
load("C:/Users/Gabriel/Downloads/ELSOC_W05_v1.0_R.RData")
View(elsoc_2021)
elsoc_2021$c14_02
elsoc_2021$c13
table(elsoc_2021$c13)
find_var(elsoc_2021, "num")
library(sjmisc)
find_var(elsoc_2021, "num")
find_var(elsoc_2021, "cant")
table(elsoc_2021$c03)
table(elsoc_2021$c02)
frq(elsoc_2021$c02)
frq(elsoc_2021$c18_04)
lm(t16 ~ c18_04, data = elsoc_2021)
frq(elsoc_2021$f05_03)
frq(elsoc_2021$m42_02)
frq(elsoc_2021$c15)
frq(elsoc_2021$g01_04)
lm(g01_04 ~ c15, data = elsoc_2021 %>%
filter(g01_04 > 0 & c15 %in% 0:10))
elsoc_2021 %>%
filter(g01_04 > 0 & c15 %in% 0:10)
library(dplyr)
lm(g01_04 ~ c15, data = elsoc_2021 %>%
filter(g01_04 > 0 & c15 %in% 0:10))
library(texreg)
a<-lm(g01_04 ~ c15, data = elsoc_2021 %>%
filter(g01_04 > 0 & c15 %in% 0:10))
screenreg(a)
frq(elsoc_2021$g37_04)
frq(elsoc_2021$c37_04)
a<-lm(c37_04 ~ c15, data = elsoc_2021 %>%
filter(c37_04 > 0 & c15 %in% 0:10))
screenreg(a)
a<-lm(c37_02 ~ c15, data = elsoc_2021 %>%
filter(c37_02 > 0 & c15 %in% 0:10))
screenreg(a)
frq(elsoc_2021$c37_05)
a<-lm(c37_05 ~ c15, data = elsoc_2021 %>%
filter(c37_05 > 0 & c15 %in% 0:10))
screenreg(a)
a<-lm(c37_01 ~ c15, data = elsoc_2021 %>%
filter(c37_01 > 0 & c15 %in% 0:10))
screenreg(a)
frq(elsoc_2021$c18_11)
a<-lm(c18_11 ~ c15, data = elsoc_2021 %>%
filter(c18_11 > 0 & c15 %in% 0:10))
screenreg(a)
frq(elsoc_2021$m0_edad)
frq(elsoc_2021$m16)
a<-lm(c15 ~ m0_edad, data = elsoc_2021 %>%
filter( c15 %in% 0:10))
screenreg(a)
a<-lm(m16 ~ m0_edad, data = elsoc_2021 %>%
filter( c15 %in% 0:10))
screenreg(a)
frq(elsoc_2021$m16)
filter(m16>0)
a<-lm(m16 ~ m0_edad, data = elsoc_2021 %>%
filter(m16>0))
screenreg(a)
a<-lm(m16 ~ c15, data = elsoc_2021 %>%
filter(m16>0 & c15 %in% 0:10))
screenreg(a)
temp <- tempfile() #Creamos un archivo temporal
download.file("https://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2022/Base%20de%20datos%20Casen%202022%20SPSS.sav.zip",temp) #descargamos los datos
casen <- haven::read_sav(unz(temp, "Base de datos Casen 2022 SPSS.sav")) #cargamos los datos
unlink(temp); remove(temp) #eliminamos el archivo temporal
lm(casen$ytrabajocor~casen$esc)
screenreg(lm(casen$ytrabajocor~casen$esc))
htmlreg(lm(casen$ytrabajocor~casen$esc),
custom.coef.names = c("Intercepto", "Años de escolaridad"),
file = "reg.html")
getwd()
plot(a)
a<-lm(casen$ytrabajocor~casen$esc)
plot(a)
data <- data.frame(
ID = 1:10,
ej = c(0, 0, 0, 2, 2, 2, 2, 4, 4, 4),  # Frecuencia de ejercicio (horas semanales promedio)
cal = c(2, 4, 6, 2, 4, 6, 8, 4, 6, 8),  # Ingesta diaria promedio de alimentos (100s de calorías sobre el recomendado)
ppeso  = c(6, 2, 4, 8, 9, 8, 5, 11, 13, 9) # Pérdida de peso semanal promedio (100s de gramos)
)
cor(data[-1])
# Convertir las horas de ejercicio en un factor
data$ej_factor <- as.factor(data$ej)
# Gráfico de dispersión con diferentes colores para las horas de ejercicio y líneas de regresión separadas
ggplot(data, aes(x = cal, y = ppeso, color = ej_factor)) +
geom_point() +  # Agregar los puntos de dispersión
geom_smooth(method = "lm", se = FALSE) +  # Agregar la línea de regresión separada por cada nivel de ejercicio
labs(
title = "Relación entre ingesta de alimentos y pérdida de peso",
x = "Ingesta diaria de alimentos (100s de calorías, X2)",
y = "Pérdida de peso (100s de gramos, Y)",
color = "Horas de ejercicio (X1)"
) +
theme_minimal()
library(ggplot2)
# Convertir las horas de ejercicio en un factor
data$ej_factor <- as.factor(data$ej)
# Gráfico de dispersión con diferentes colores para las horas de ejercicio y líneas de regresión separadas
ggplot(data, aes(x = cal, y = ppeso, color = ej_factor)) +
geom_point() +  # Agregar los puntos de dispersión
geom_smooth(method = "lm", se = FALSE) +  # Agregar la línea de regresión separada por cada nivel de ejercicio
labs(
title = "Relación entre ingesta de alimentos y pérdida de peso",
x = "Ingesta diaria de alimentos (100s de calorías, X2)",
y = "Pérdida de peso (100s de gramos, Y)",
color = "Horas de ejercicio (X1)"
) +
theme_minimal()
# Instalar y cargar las librerías necesarias
install.packages("plotly")
library(plotly)
# Crear la base de datos
data <- data.frame(
id = 1:10,
ej = c(0, 0, 0, 2, 2, 2, 2, 4, 4, 4),  # Frecuencia de ejercicio (horas semanales promedio)
cal = c(2, 4, 6, 2, 4, 6, 8, 4, 6, 8),  # Ingesta diaria promedio de alimentos (100s de calorías sobre el recomendado)
ppeso  = c(6, 2, 4, 8, 9, 8, 5, 11, 13, 9) # Pérdida de peso semanal promedio (100s de gramos)
)
# Ajustar el modelo de regresión lineal múltiple
modelo <- lm(ppeso ~ ej + cal, data = data)
# Crear el gráfico 3D con el plano de regresión
plot_ly(data, x = ~ej, y = ~cal, z = ~ppeso, type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
add_trace(
x = data$ej,
y = data$cal,
z = predict(modelo),
type = "scatter3d",
mode = "lines",
line = list(color = 'blue', width = 4)
) %>%
layout(
title = "Relación entre ejercicio, ingesta de alimentos y pérdida de peso",
scene = list(
xaxis = list(title = "Ejercicio (X1)"),
yaxis = list(title = "Ingesta de alimentos (X2)"),
zaxis = list(title = "Pérdida de peso (Y)")
)
)
# Ajustar el modelo de regresión
modelo <- lm(ppeso ~ ej + cal, data = data)
# Crear una malla de puntos para simular el plano de regresión
new_data <- expand.grid(
ej = seq(min(data$ej), max(data$ej), length.out = 10),
cal = seq(min(data$cal), max(data$cal), length.out = 10)
)
new_data$ppeso <- predict(modelo, newdata = new_data)
# Crear gráfico 3D aproximado
ggplot() +
geom_point(data = data, aes(x = ej, y = cal, z = ppeso), color = "blue") +  # Puntos de los datos originales
geom_tile(data = new_data, aes(x = ej, y = cal, fill = ppeso), alpha = 0.3) +  # Plano de regresión
scale_fill_gradient(low = "lightblue", high = "red") +
labs(
title = "Plano de Regresión entre Ejercicio, Ingesta de Alimentos y Pérdida de Peso",
x = "Ejercicio (X1)",
y = "Ingesta de alimentos (X2)",
fill = "Pérdida de peso (Y)"
) +
theme_minimal()
temp <- tempfile() #Creamos un archivo temporal
download.file("https://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2022/Base%20de%20datos%20Casen%202022%20SPSS.sav.zip",temp) #descargamos los datos
casen <- haven::read_sav(unz(temp, "Base de datos Casen 2022 SPSS.sav")) #cargamos los datos
unlink(temp); remove(temp) #eliminamos el archivo temporal
casen %>%
select(esc, sexo, ytrabajocor)
library(dplyr)
casen %>%
select(esc, sexo, ytrabajocor)
casen2<-casen %>%
select(esc, sexo, ytrabajocor)
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr)
lm(ytrabajocor ~ esc + sexo, data= casen2)
texreg(lm(ytrabajocor ~ esc + sexo, data= casen2))
library(texreg)
screenreg(lm(ytrabajocor ~ esc + sexo, data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo), data= casen2))
screenreg(lm(ytrabajocor ~ esc , data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo), data= casen2))
screenreg(lm(ytrabajocor ~ factor(sexo), data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo), data= casen2))
library(haven)
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area)
write_sav(casen2, "data/casen.sav" )
casen<- read_sav("data/casen.sav")
temp <- tempfile() #Creamos un archivo temporal
download.file("https://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2022/Base%20de%20datos%20Casen%202022%20SPSS.sav.zip",temp) #descargamos los datos
casen <- haven::read_sav(unz(temp, "Base de datos Casen 2022 SPSS.sav")) #cargamos los datos
unlink(temp); remove(temp) #eliminamos el archivo temporal
library(haven)
library(dplyr)
library(texreg)
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area)
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10,o18)
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10, data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10+ factor(o18), data= casen2))
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10,o18, o25)
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10+ factor(o18) + factor(o25), data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10 + factor(o25), data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10 + factor(o18), data= casen2))
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10,o15,o18, o25)
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10 + factor(o15), data= casen2))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ o10 + factor(region), data= casen2))
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10,o15,o18, o25, educ)
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ factor(educ), data= casen2))
table(as_factor(casen$educ))
table(casen$educ)
table(as_factor(casen$educ))
casen2<-casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10,o15,o18, o25, educ) %>%
mutate(educ_simple = case_when(
educ %in% c(0, 1, 2, 3, 4) ~ "Menos que Media",  # Sin educación o Básica
educ %in% c(5, 6) ~ "Media Completa",            # Media completa o incompleta
educ %in% c(7, 8) ~ "Superior Técnica",          # Técnico nivel superior
educ %in% c(9, 10, 11, 12) ~ "Superior Profesional"  # Profesional o Posgrado
))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ factor(educ_simple), data= casen2))
table(casen2$educ_simple)
casen2 <- casen %>%
select(esc, sexo, ytrabajocor, expr, region, area, o10, o15, o18, o25, educ) %>%
mutate(educ_simple = case_when(
educ %in% c(0, 1, 2, 3, 4) ~ 1,  # Sin educación o Básica
educ %in% c(5, 6) ~ 2,           # Media completa o incompleta
educ %in% c(7, 8) ~ 3,           # Técnico nivel superior
educ %in% c(9, 10, 11, 12) ~ 4   # Profesional o Posgrado
))
# Paso 2: Convertir 'educ_simple' a factor con etiquetas
casen2 <- casen2 %>%
mutate(educ_simple_factor = factor(educ_simple,
levels = c(1, 2, 3, 4),
labels = c("Menos que Media", "Media Completa",
"Superior Técnica", "Superior Profesional")))
screenreg(lm(ytrabajocor ~ esc + factor(sexo)+ educ_simple_factor, data= casen2))
screenreg(lm(ytrabajocor ~ factor(sexo)+ educ_simple_factor, data= casen2))
write_sav(casen2, "data/casen.sav" )
library(haven)
library(tidyverse)
library(texreg)
casen2 <- read_sav("data/casen.sav")
casen2 %>%
filter(!is.na(ytrabajocor)) %>%
select(ytrabajocor, esc, edad, sexo, educ_simple_factor) %>%
head()
casen2p<-casen2 %>%
filter(!is.na(ytrabajocor) & !is.na(esc) & is.na(edad))
casen2p<-casen2 %>%
filter(!is.na(ytrabajocor) & !is.na(esc) & is.na(edad))
casen2p<-casen2 %>%
filter(!is.na(ytrabajocor) & !is.na(esc) & !is.na(edad))
mod_esc<- lm(esc ~ edad, data = casen2p)
mod_esc<- lm(edad ~ esc, data = casen2p)
mod_esc <- lm(esc ~ edad, data = casen2p)
mod_edad <- lm(edad ~ esc, data = casen2p)
casen2p<-casen2 %>%
select(ytrabajocor, edad, esc) %>%
filter(!is.na(ytrabajocor) & !is.na(esc) & !is.na(edad))
data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
casen2pp<-data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
lm(ytrabajocor ~ mod_esc.residuals + mod_edad.residuals , data = casen2pp)
lm(ytrabajocor ~ mod_esc.residuals + mod_edad.residuals , data = casen2pp)
lm(ytrabajocor ~ edad + esc , data = casen2p)
screenreg(list(lm(ytrabajocor ~ mod_esc.residuals + mod_edad.residuals , data = casen2pp),
lm(ytrabajocor ~ edad + esc , data = casen2p)))
mod_esc <- lm(esc ~ edad, data = casen2p)
mod_edad <- lm(edad ~ esc, data = casen2p)
casen2pp<-data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
screenreg(list(lm(ytrabajocor ~ mod_esc.residuals + mod_edad.residuals , data = casen2pp),
lm(ytrabajocor ~ edad + esc , data = casen2p)))
casen2pp<-data.frame(casen2p, mod_esc$fitted.values, mod_edad$fitted.values)
casen2pp<-data.frame(casen2p, mod_esc$fitted.values, mod_edad$fitted.values)
screenreg(list(lm(ytrabajocor ~ mod_esc.fitted.values + mod_edad.fitted.values , data = casen2pp),
lm(ytrabajocor ~ edad + esc , data = casen2p)))
casen2pp<-data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
casen2pp<-data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
screenreg(list(lm(ytrabajocor ~ mod_esc.residuals  , data = casen2pp),
lm(ytrabajocor ~ mod_edad.residuals  , data = casen2pp),
lm(ytrabajocor ~ edad + esc , data = casen2p)))
casen2p<-casen2 %>%
select(ytrabajocor, edad, esc) %>%
filter(!is.na(ytrabajocor) & !is.na(esc) & !is.na(edad))
mod_esc <- lm(esc ~ edad, data = casen2p)
mod_edad <- lm(edad ~ esc, data = casen2p)
casen2pp<-data.frame(casen2p, mod_esc$residuals, mod_edad$residuals)
screenreg(list(lm(ytrabajocor ~ mod_esc.residuals  , data = casen2pp),
lm(ytrabajocor ~ mod_edad.residuals  , data = casen2pp),
lm(ytrabajocor ~  esc + edad , data = casen2p)))
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(42)
n <- 100
escolaridad <- sample(8:20, n, replace = TRUE)  # Años de escolaridad entre 8 y 20
sexo <- sample(c("Mujer", "Hombre"), n, replace = TRUE)  # Sexo: "Mujer" o "Hombre"
brecha_sexo <- 5000  # Diferencia de ingresos entre hombres y mujeres
coef_esc <- 1500  # Aumento de ingresos por cada año adicional de escolaridad
# Generar ingresos como función de escolaridad y sexo
ingresos <- 20000 + escolaridad * coef_esc + ifelse(sexo == "Hombre", brecha_sexo, 0) + rnorm(n, 0, 5000)
# Crear data frame
df <- data.frame(Escolaridad = escolaridad, Sexo = sexo, Ingresos = ingresos)
# Crear gráfico
ggplot(df, aes(x = Escolaridad, y = Ingresos, color = Sexo)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +  # Líneas de regresión por grupo de sexo
labs(
title = "Relación entre Escolaridad e Ingresos por Sexo (Datos Ficticios)",
x = "Años de Escolaridad",
y = "Ingresos (USD)"
) +
theme_minimal()
library(haven)
library(tidyverse)
library(texreg)
casen2 <- read_sav("data/casen.sav")
casen2 %>%
filter(!is.na(ytrabajocor)) %>%
select(ytrabajocor, esc, edad) %>%
head()
screenreg(lm(ytrabajocor ~ esc + edad), data = casen2)
casen2$ytrabajocor
screenreg(lm(ytrabajocor ~ esc + edad, data = casen2))
screenreg(lm(ytrabajocor ~ esc + edad, data = casen2))
modelo3 <- lm(ytrabajocor ~ esc + edad, data = casen2)
htmlreg(list(modelo3))
modelo3$coefficients
modelo3$model
# Extraer los valores t y p para las variables esc y edad
valor_t_esc <- coeficientes["esc", "t value"]
screenreg(lm(ytrabajocor ~ esc + edad, data = casen2))
seq(0,1,0.01)
p<-seq(0,1,0.01)
odds<- p(1-p)
odds<- p/(1-p)
table(p/1-p)
plot(p, odds)
logit<- ln(odds)
logit<- log(odds)
plot(p, logit)
ggplot(data = data.frame(p, odds), aes(x = p, y = odds)) +
geom_line(color = "darkgreen", size = 1.1) +
labs(title = "Odds según valores de p", x = "p", y = "Odds = p / (1 - p)") +
theme_minimal()
library(ggplot2)
ggplot(data = data.frame(p, odds), aes(x = p, y = odds)) +
geom_line(color = "darkgreen", size = 1.1) +
labs(title = "Odds según valores de p", x = "p", y = "Odds = p / (1 - p)") +
theme_minimal()
library(ggplot2)
ggplot(data = data.frame(p, odds), aes(x = p, y = odds)) +
geom_line(color = "darkgreen", size = 1.1) +
labs(title = "Odds según valores de p", x = "p", y = "Odds = p / (1 - p)") +
theme_minimal()
ggplot(data = data.frame(p, odds), aes(x = p, y = odds)) +
geom_line(color = "darkgreen", size = 1.1) +
labs(title = "Odds según valores de p", x = "p", y = "Odds = p / (1 - p)") +
theme_minimal()
p <- seq(0, 1, 0.01)
odds <- p / (1 - p)
print(data.frame(p,odds))
p <- seq(0, 1, 0.1)
odds <- p / (1 - p)
print(data.frame(p,odds))
p <- seq(0, 1, 0.1)
odds <- p / (1 - p)
logit <- log(p / (1 - p))
print(data.frame(p,odds))
print(data.frame(p,odds,logit))
library(DescTools)
