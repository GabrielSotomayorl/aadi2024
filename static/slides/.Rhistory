}
# Crear los gráficos individuales
p1 <- plot_histogram(residuals_normal, "Histograma: Errores Normales Ajustados")
p2 <- plot_qq(residuals_normal, "Q-Q Plot: Errores Normales Ajustados")
p3 <- plot_histogram(residuals_non_normal, "Histograma: Errores No Normales")
p4 <- plot_qq(residuals_non_normal, "Q-Q Plot: Errores No Normales")
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 1)  # Relación lineal con error normal
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 0.5 * x^2 + rnorm(n, mean = 0, sd = 1)  # Relación cuadrática
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(1233)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(1233)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("
digraph flowchart {
# Nodo inicial del esquema
node [shape = box, fontname = Helvetica, fontsize = 10]
subgraph cluster_0 {
label = '1. DECISIONES PREVIAS AL ANÁLISIS DE CONGLOMERADOS';
color = black;
style = dashed;
n1a [label = 'Elección de variables']
n1b [label = 'Método de conglomeración']
n1c [label = 'Algoritmo de clasificación']
n1d [label = 'Medidas de distancia y similitud']
n1a -> n1b;
n1b -> n1c;
n1b -> n1d;
}
# Segunda fase del esquema
n2 [label = '2. OBTENCIÓN DE CONGLOMERADOS\n- Decisión sobre el número adecuado de conglomerados']
# Tercera fase del esquema
n3 [label = '3. INTERPRETACIÓN DE LOS RESULTADOS\n(numéricos y gráficos)\n- El perfil de los conglomerados']
# Cuarta fase del esquema
n4 [label = '4. VALIDACIÓN DE LOS RESULTADOS']
# Flechas de conexión
subgraph cluster_validation {
label = 'Validación de los Resultados';
color = none;
style = dashed;
n4a [label = 'Negativa\n- Introducción de modificaciones']
n4b [label = 'Positiva\n- Conclusión del análisis']
}
# Relaciones entre nodos
n1c -> n2;
n2 -> n3;
n3 -> n4;
n4 -> n4a [label = 'REPLANTEAR', fontsize = 8, fontcolor = gray, dir=back];
n4 -> n4b;
}
")
grViz("
digraph flowchart {
# Configuración general de los nodos
node [shape = box, style = filled, color = black, fillcolor = white, fontsize = 12, fontname = Helvetica]
edge [color = black]
# Subgráfico para la fase de decisiones previas
subgraph cluster_1 {
label = '1. DECISIONES PREVIAS AL ANÁLISIS DE CONGLOMERADOS';
color = black;
style = dashed;
fontsize = 14;
a1 [label = 'Elección de variables', width = 1.4]
a2 [label = 'Método de conglomeración', width = 1.4]
a3 [label = 'Algoritmo de clasificación', width = 1.4]
a4 [label = 'Medidas de distancia y similitud', width = 1.4]
# Conexiones entre los nodos de decisiones previas
a1 -> a2
a2 -> a3
a2 -> a4
}
# Nodos para las siguientes fases
b1 [label = '2. OBTENCIÓN DE CONGLOMERADOS\n- Decisión sobre el número adecuado de conglomerados', width = 2]
b2 [label = '3. INTERPRETACIÓN DE LOS RESULTADOS\n(numéricos y gráficos)\n- El perfil de los conglomerados', width = 2]
b3 [label = '4. VALIDACIÓN DE LOS RESULTADOS', width = 2]
# Nodos para la validación de los resultados
c1 [label = 'Negativa\n- Introducción de modificaciones', width = 2]
c2 [label = 'Positiva\n- Conclusión del análisis', width = 2]
# Relaciones entre nodos
a3 -> b1
b1 -> b2
b2 -> b3
b3 -> c1 [label = 'REPLANTEAR', fontsize = 10, fontcolor = gray, constraint=false]
b3 -> c2
# Etiqueta global
labelloc = \"t\";
fontsize = 16;
}
")
grViz("
digraph flowchart {
# Configuración general de nodos
node [shape = box, style = filled, color = black, fillcolor = white, fontsize = 12, fontname = Helvetica]
edge [color = black]
# Subgráfico para la fase de decisiones previas
subgraph cluster_1 {
label = '1. DECISIONES PREVIAS AL ANÁLISIS DE CONGLOMERADOS';
color = black;
style = dashed;
fontsize = 14;
# Definición de nodos
a1 [label = 'Elección de variables', width = 1.4]
a2 [label = 'Método de conglomeración', width = 1.4]
a3 [label = 'Algoritmo de clasificación', width = 1.4]
a4 [label = 'Medidas de distancia y similitud', width = 1.4]
# Conexiones entre los nodos de decisiones previas
a1 -> a2
a2 -> a3
a2 -> a4 [dir=both, arrowhead=normal, arrowtail=none]
}
# Nodos para las siguientes fases
b1 [label = '2. OBTENCIÓN DE CONGLOMERADOS\n- Decisión sobre el número adecuado de conglomerados', width = 2]
b2 [label = '3. INTERPRETACIÓN DE LOS RESULTADOS\n(numéricos y gráficos)\n- El perfil de los conglomerados', width = 2]
b3 [label = '4. VALIDACIÓN DE LOS RESULTADOS', width = 2]
# Nodos para la validación de los resultados
c1 [label = 'Negativa\n- Introducción de modificaciones', width = 2]
c2 [label = 'Positiva\n- Conclusión del análisis', width = 2]
# Relaciones entre nodos
a3 -> b1
b1 -> b2
b2 -> b3
b3 -> c1 [label = 'REPLANTEAR', fontsize = 10, fontcolor = gray, constraint=false]
b3 -> c2
# Etiqueta global
labelloc = \"t\";
fontsize = 16;
}
")
grViz("
digraph flowchart {
# Configuración general de nodos
node [shape = box, style = filled, color = black, fillcolor = white, fontsize = 12, fontname = Helvetica]
edge [color = black]
# Subgráfico para la fase de decisiones previas
subgraph cluster_1 {
label = '1. DECISIONES PREVIAS AL ANÁLISIS DE CONGLOMERADOS';
color = black;
style = dashed;
fontsize = 14;
# Definición de nodos
a1 [label = 'Elección de variables', width = 1.4]
a2 [label = 'Método de conglomeración', width = 1.4]
a3 [label = 'Algoritmo de clasificación', width = 1.4]
a4 [label = 'Medidas de distancia y similitud', width = 1.4]
# Conexiones entre los nodos de decisiones previas
a1 -> a2
a2 -> a3
a2 -> a4 [dir=both, arrowhead=normal, arrowtail=none]
}
# Nodos para las siguientes fases
b1 [label = '2. OBTENCIÓN DE CONGLOMERADOS\n- Decisión sobre el número adecuado de conglomerados', width = 2]
b2 [label = '3. INTERPRETACIÓN DE LOS RESULTADOS\n(numéricos y gráficos)\n- El perfil de los conglomerados', width = 2]
b3 [label = '4. VALIDACIÓN DE LOS RESULTADOS', width = 2]
# Nodos para la validación de los resultados
c1 [label = 'Negativa\n- Introducción de modificaciones', width = 2]
c2 [label = 'Positiva\n- Conclusión del análisis', width = 2]
# Relaciones entre nodos
a3 -> b1
b1 -> b2
b2 -> b3
b3 -> c1 [label = 'REPLANTEAR', fontsize = 10, fontcolor = gray, constraint=false]
b3 -> c2
# Etiqueta global
labelloc = \"t\";
fontsize = 16;
}
")
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(dplyr, cluster, factoextra, WDI, knitr, kableExtra)
# Descargar datos relevantes del Banco Mundial para el año 2020
indicadores <- WDI(country = "all",
indicator = c("NY.GDP.PCAP.CD",  # PIB per cápita (ingreso)
"SE.XPD.TOTL.GD.ZS",  # Gasto en educación (% del PIB)
"SP.DYN.LE00.IN",  # Esperanza de vida al nacer (salud)
"SE.SEC.ENRR"  # Tasa de matrícula en la educación secundaria (educación)
),
start = 2020, end = 2020, extra = TRUE)
# Limpiar los datos: eliminar regiones y observaciones con valores faltantes
indicadores_clean <- indicadores %>%
filter(!region %in% c("Aggregates", NA)) %>%
filter(region %in% c("Latin America & Caribbean")) %>%
select(country, NY.GDP.PCAP.CD, SE.XPD.TOTL.GD.ZS, SP.DYN.LE00.IN, SE.SEC.ENRR) %>%
na.omit()
# Renombrar columnas para facilitar el trabajo
colnames(indicadores_clean) <- c("country", "gdp_per_capita", "education_exp", "life_expectancy", "secondary_enrollment")
indicadores_scaled <- indicadores_clean %>%
select(gdp_per_capita, education_exp, life_expectancy, secondary_enrollment) %>%
scale()
set.seed(123)  # Para reproducibilidad
distancia <- dist(indicadores_scaled, method = "euclidean")
hc <- hclust(distancia, method = "complete")
hc$merge
library(dplyr)
library(knitr)
library(kableExtra)
# Obtener el historial de conglomeración
conglomeracion_hist <- data.frame(
Paso = 1:(nrow(hc$merge)),
Cluster1 = hc$merge[,1],
Cluster2 = hc$merge[,2],
Altura = hc$height
) %>%
# Convertir números negativos de clusters a nombres de países para mayor legibilidad
mutate(
Cluster1 = ifelse(Cluster1 < 0, indicadores_clean$country[-Cluster1], Cluster1),
Cluster2 = ifelse(Cluster2 < 0, indicadores_clean$country[-Cluster2], Cluster2)
)
data.frame(hc$merge[1])
data.frame(hc$merge[,1])
data.frame(hc$merge[,1],hc$merge[,2], hc$height)
data.frame(1: length(hc$merge[,1]),hc$merge[,1],hc$merge[,2], hc$height)
hist<-data.frame(1: length(hc$merge[,1]),hc$merge[,1],hc$merge[,2], hc$height)
colnames(hist) <- c("Paso", "Cluster1", "Cluster2", "Altura")
hist
head(hist)
grupos <- cutree(hc, k = 3)
# Agregar los conglomerados al dataframe original
indicadores_clean$conglomerado <- grupos
head(indicadores_clean)
head(indicadores_clean[,c(-2)], 20)
head(indicadores_clean[,c(-2,-3,-4)], 20)
head(indicadores_clean[,c(-2,-3,-4,-5)], 20)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(dplyr,factoextra , corrplot, knitr, kableExtra)
pacman::p_load(dplyr,factoextra , corrplot, knitr, kableExtra)
temp <- tempfile()
download.file("https://github.com/GabrielSotomayorl/aadi2024/raw/refs/heads/main/content/example/input/data/ELSOC_Long_2016_2022_v1.00.RData", temp)
download.file("https://github.com/GabrielSotomayorl/aadi2024/raw/refs/heads/main/content/example/input/data/ELSOC_Long_2016_2022_v1.00.RData", temp)
load(temp)
unlink(temp)
unlink(temp)
elsoc<- elsoc_long_2016_2022.2 %>%
filter(ola == 6)  %>%
mutate(across(c(c37_01:c37_09), ~ ifelse(. < 0, NA, .))) %>%
filter(!(is.na(c37_01)|is.na(c37_02)|is.na(c37_03)|is.na(c37_04)|is.na(c37_05)|is.na(c37_06)|is.na(c37_07)|is.na(c37_08)))
elsoc<- elsoc_long_2016_2022.2 %>%
filter(ola == 6)  %>%
mutate(across(c(c37_01:c37_09), ~ ifelse(. < 0, NA, .))) %>%
filter(!(is.na(c37_01)|is.na(c37_02)|is.na(c37_03)|is.na(c37_04)|is.na(c37_05)|is.na(c37_06)|is.na(c37_07)|is.na(c37_08)))
elsoc_vars <- elsoc %>%
select(c37_01:c37_08)
set.seed(123)  # Para reproducibilidad
# Aplicar k-medias con 3 conglomerados
kmeans_result <- kmeans(elsoc_vars, centers = 4, nstart = 25)
# Agregar los conglomerados al dataframe original
elsoc$conglomerado <- kmeans_result$cluster
caracterizacion <- elsoc %>%
group_by(conglomerado) %>%
summarise(
across(c(c37_01:c37_08), mean, na.rm = TRUE),
cantidad_individuos = n()
)
# Crear un tibble para presentar los resultados con nombres más claros
caracterizacion_tidy <- caracterizacion %>%
rename(
"Conglomerado" = conglomerado,
"Adopción Homoparental" = c37_01,
"Aborto" = c37_02,
"Rol del Estado en Educación" = c37_03,
"Capitalización Individual Pensiones" = c37_04,
"Restricciones Migratorias" = c37_05,
"Educación Sexual (Padres)" = c37_06,
"Restricción a Empresas Contaminantes" = c37_07,
"Gasto Social Focalizado" = c37_08,
"Cantidad de Individuos" = cantidad_individuos
)
# Mostrar la caracterización con una tabla kable bonita
caracterizacion_tidy %>%
kbl(caption = "Caracterización de los Conglomerados Ideológicos") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F)
