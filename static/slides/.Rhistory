panel.grid.minor = element_blank()
)
# Función para crear cada gráfico con la ecuación de regresión
plot_anscombe <- function(x, y, title) {
modelo <- lm(y ~ x)
coef <- coef(modelo)
eq <- paste0("Y = ", round(coef[1], 2), " + ", round(coef[2], 2), " * X")
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_point(color = "#2C7FB8", size = 4, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = title, x = "X", y = "Y") +
annotate("text", x = min(x), y = max(y) - 0.5, label = eq, hjust = 0, size = 5, color = "#4A4A4A") +
custom_theme
}
# Crear los gráficos individuales
plot1 <- plot_anscombe(anscombe$x1, anscombe$y1, "Dataset 1")
plot2 <- plot_anscombe(anscombe$x2, anscombe$y2, "Dataset 2")
plot3 <- plot_anscombe(anscombe$x3, anscombe$y3, "Dataset 3")
plot4 <- plot_anscombe(anscombe$x4, anscombe$y4, "Dataset 4")
# Organizar los gráficos en una cuadrícula
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
library(ggplot2)
# Tema personalizado
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Escenario 1: Homocedástico
set.seed(42)
n <- 100
X1 <- rnorm(n, 0, 1)
Y1 <- 3 * X1 + rnorm(n, 0, 1)
modelo1 <- lm(Y1 ~ X1)
data1 <- data.frame(Fitted = modelo1$fitted.values, Residuals = rstandard(modelo1))
plot1 <- ggplot(data1, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Residuos Homocedásticos", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Escenario 2: Heterocedástico (Patrón de Cono)
set.seed(43)
X2 <- rnorm(n, 0, 1)
Y2 <- 3 * X2 + rnorm(n, 0, abs(X2))  # Varianza de residuos aumenta con X
modelo2 <- lm(Y2 ~ X2)
data2 <- data.frame(Fitted = modelo2$fitted.values, Residuals = rstandard(modelo2))
plot2 <- ggplot(data2, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Heterocedasticidad en Forma de Cono", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Escenario 3: Heterocedástico (Patrón de Mariposa)
set.seed(44)
X3 <- rnorm(n, 0, 1)
Y3 <- 3 * X3 + rnorm(n, 0, abs(X3)^2)  # Varianza de residuos aumenta y luego disminuye con X
modelo3 <- lm(Y3 ~ X3)
data3 <- data.frame(Fitted = modelo3$fitted.values, Residuals = rstandard(modelo3))
plot3 <- ggplot(data3, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Heterocedasticidad en Forma de Mariposa", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Mostrar gráficos en una cuadrícula
library(gridExtra)
grid.arrange(plot1, plot2, plot3, ncol = 3)
# Cargar paquetes necesarios
library(ggplot2)
# Tema personalizado
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Escenario 1: Homocedástico
set.seed(42)
n <- 100
X1 <- rnorm(n, 0, 1)
Y1 <- 3 * X1 + rnorm(n, 0, 1)
modelo1 <- lm(Y1 ~ X1)
data1 <- data.frame(Fitted = modelo1$fitted.values, Residuals = rstandard(modelo1))
plot1 <- ggplot(data1, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Residuos Homocedásticos", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Escenario 2: Heterocedástico (Patrón de Cono)
set.seed(43)
X2 <- rnorm(n, 0, 1)
Y2 <- 3 * X2 + rnorm(n, 0, abs(X2) * 2)  # Aumenta la varianza de forma más evidente
modelo2 <- lm(Y2 ~ X2)
data2 <- data.frame(Fitted = modelo2$fitted.values, Residuals = rstandard(modelo2))
plot2 <- ggplot(data2, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Heterocedasticidad en Forma de Cono", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Escenario 3: Heterocedástico (Patrón de Mariposa)
set.seed(44)
X3 <- rnorm(n, 0, 1)
Y3 <- 3 * X3 + rnorm(n, 0, abs(X3)^2)  # Varianza de residuos aumenta y luego disminuye con X
modelo3 <- lm(Y3 ~ X3)
data3 <- data.frame(Fitted = modelo3$fitted.values, Residuals = rstandard(modelo3))
plot3 <- ggplot(data3, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Heterocedasticidad en Forma de Mariposa", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Mostrar gráficos en una cuadrícula
library(gridExtra)
grid.arrange(plot1, plot2, plot3, ncol = 3)
# Cargar librerías
library(ggplot2)
library(gridExtra)
# Crear datos de ejemplo
set.seed(123)
n <- 50
x <- seq(1, 50, length.out = n)
# Simulación de residuos para tres tipos de modelos
residuals_linear <- rnorm(n, mean = 0, sd = 1)
residuals_quadratic <- (x - mean(x))^2 / max((x - mean(x))^2) * 3 + rnorm(n, mean = 0, sd = 1)
residuals_cubic <- (x - mean(x))^3 / max(abs((x - mean(x))^3)) * 3 + rnorm(n, mean = 0, sd = 1)
# Crear data frames para cada gráfico
data_linear <- data.frame(x = x, Residuals = residuals_linear, Model = "Lineal")
data_quadratic <- data.frame(x = x, Residuals = residuals_quadratic, Model = "Cuadrático")
data_cubic <- data.frame(x = x, Residuals = residuals_cubic, Model = "Cúbico")
# Crear gráfico base
plot_residuals <- function(data, title) {
ggplot(data, aes(x = x, y = Residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "solid") +
theme_minimal() +
theme(panel.background = element_rect(fill = "gray90", color = NA)) +
labs(x = "x", y = "Residuos", title = title) +
ylim(-4, 4)
}
# Crear los tres gráficos
p1 <- plot_residuals(data_linear, "Modelo Lineal")
p2 <- plot_residuals(data_quadratic, "Modelo Cuadrático")
p3 <- plot_residuals(data_cubic, "Modelo Cúbico")
# Organizar los gráficos en una cuadrícula
grid.arrange(p1, p2, p3, ncol = 1)
# Cargar librerías
library(ggplot2)
library(gridExtra)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n)
y_normal <- 3 + 2 * x + rnorm(n)  # Modelo con errores normales
y_non_normal <- 3 + 2 * x + rt(n, df = 3)  # Modelo con errores no normales (t-Student con df bajos)
# Ajustar los modelos de regresión
model_normal <- lm(y_normal ~ x)
model_non_normal <- lm(y_non_normal ~ x)
# Extraer residuos estandarizados
residuals_normal <- rstandard(model_normal)
residuals_non_normal <- rstandard(model_non_normal)
# Crear gráficos de histograma y Q-Q plot para cada modelo
plot_histogram <- function(residuals, title) {
ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(aes(y = ..density..), bins = 15, color = "black", fill = "lightblue") +
geom_density(color = "blue") +
theme_minimal() +
labs(title = title, x = "Residuos estandarizados", y = "Densidad")
}
plot_qq <- function(residuals, title) {
ggplot(data.frame(sample = residuals), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
theme_minimal() +
labs(title = title, x = "Cuantiles teóricos", y = "Cuantiles de los residuos")
}
# Crear los gráficos individuales
p1 <- plot_histogram(residuals_normal, "Histograma: Errores Normales")
p2 <- plot_qq(residuals_normal, "Q-Q Plot: Errores Normales")
p3 <- plot_histogram(residuals_non_normal, "Histograma: Errores No Normales")
p4 <- plot_qq(residuals_non_normal, "Q-Q Plot: Errores No Normales")
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Cargar librerías
library(ggplot2)
library(gridExtra)
# Configuración de datos simulados con un tamaño de muestra más grande para mejorar la normalidad
set.seed(123)
n <- 500  # Incremento en el número de observaciones para una mayor precisión
x <- rnorm(n)
y_normal <- 3 + 2 * x + rnorm(n, mean = 0, sd = 1)  # Modelo con errores normales ajustados
y_non_normal <- 3 + 2 * x + rt(n, df = 3)  # Modelo con errores no normales (t-Student con df bajos)
# Ajustar los modelos de regresión
model_normal <- lm(y_normal ~ x)
model_non_normal <- lm(y_non_normal ~ x)
# Extraer residuos estandarizados
residuals_normal <- rstandard(model_normal)
residuals_non_normal <- rstandard(model_non_normal)
# Crear gráficos de histograma y Q-Q plot para cada modelo
plot_histogram <- function(residuals, title) {
ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(aes(y = ..density..), bins = 15, color = "black", fill = "lightblue") +
geom_density(color = "blue") +
theme_minimal() +
labs(title = title, x = "Residuos estandarizados", y = "Densidad")
}
plot_qq <- function(residuals, title) {
ggplot(data.frame(sample = residuals), aes(sample = sample)) +
stat_qq() +
stat_qq_line() +
theme_minimal() +
labs(title = title, x = "Cuantiles teóricos", y = "Cuantiles de los residuos")
}
# Crear los gráficos individuales
p1 <- plot_histogram(residuals_normal, "Histograma: Errores Normales Ajustados")
p2 <- plot_qq(residuals_normal, "Q-Q Plot: Errores Normales Ajustados")
p3 <- plot_histogram(residuals_non_normal, "Histograma: Errores No Normales")
p4 <- plot_qq(residuals_non_normal, "Q-Q Plot: Errores No Normales")
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Configuración de datos simulados con un tamaño de muestra más grande para mejorar la normalidad
set.seed(123)
n <- 500  # Incremento en el número de observaciones para una mayor precisión
x <- rnorm(n)
y_normal <- 3 + 2 * x + rnorm(n, mean = 0, sd = 1)  # Modelo con errores normales ajustados
y_non_normal <- 3 + 2 * x + rt(n, df = 3)  # Modelo con errores no normales (t-Student con df bajos)
# Ajustar los modelos de regresión
model_normal <- lm(y_normal ~ x)
model_non_normal <- lm(y_non_normal ~ x)
# Extraer residuos estandarizados
residuals_normal <- rstandard(model_normal)
residuals_non_normal <- rstandard(model_non_normal)
# Tema personalizado
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Función para gráficos de histograma
plot_histogram <- function(residuals, title) {
ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(aes(y = ..density..), bins = 20, color = "black", fill = "#ADD8E6") +
geom_density(color = "#1E90FF", size = 1) +
labs(title = title, x = "Residuos estandarizados", y = "Densidad") +
custom_theme
}
# Función para gráficos Q-Q plot
plot_qq <- function(residuals, title) {
ggplot(data.frame(sample = residuals), aes(sample = sample)) +
stat_qq(color = "#2C7FB8", size = 1.5) +
stat_qq_line(color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = title, x = "Cuantiles teóricos", y = "Cuantiles de los residuos") +
custom_theme
}
# Crear los gráficos individuales
p1 <- plot_histogram(residuals_normal, "Histograma: Errores Normales Ajustados")
p2 <- plot_qq(residuals_normal, "Q-Q Plot: Errores Normales Ajustados")
p3 <- plot_histogram(residuals_non_normal, "Histograma: Errores No Normales")
p4 <- plot_qq(residuals_non_normal, "Q-Q Plot: Errores No Normales")
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 1)  # Relación lineal con error normal
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 0.5 * x^2 + rnorm(n, mean = 0, sd = 1)  # Relación cuadrática
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Cargar paquetes necesarios
library(ggplot2)
library(gridExtra)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(123)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(1233)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Tema personalizado para los gráficos
custom_theme <- theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#4A4A4A"),
axis.title = element_text(face = "bold", size = 14, color = "#4A4A4A"),
axis.text = element_text(color = "#4A4A4A"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank()
)
# Configuración de datos simulados
set.seed(1233)
n <- 100
x <- rnorm(n, 0, 1)
# Escenario 1: Relación Lineal
y_linear <- 3 + 2 * x + rnorm(n, mean = 0, sd = 0.5)  # Relación lineal con menor error
model_linear <- lm(y_linear ~ x)
data_linear <- data.frame(x, y_linear, Fitted = model_linear$fitted.values, Residuals = rstandard(model_linear))
# Escenario 2: Relación Cuadrática
y_quadratic <- 3 + 2 * x + 1 * x^2 + rnorm(n, mean = 0, sd = 0.5)  # Relación cuadrática con menor error
model_quadratic <- lm(y_quadratic ~ x)
data_quadratic <- data.frame(x, y_quadratic, Fitted = model_quadratic$fitted.values, Residuals = rstandard(model_quadratic))
# Gráfico 1: Dispersión y línea de regresión para relación lineal
plot1 <- ggplot(data_linear, aes(x = x, y = y_linear)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Lineal: Dispersión y Línea de Regresión", x = "X", y = "Y (Lineal)") +
custom_theme
# Gráfico 2: Residuos vs valores predichos para relación lineal
plot2 <- ggplot(data_linear, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Lineal: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Gráfico 3: Dispersión y línea de regresión para relación cuadrática
plot3 <- ggplot(data_quadratic, aes(x = x, y = y_quadratic)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, color = "#EF6548", linetype = "dashed", size = 1) +
labs(title = "Relación Cuadrática: Dispersión y Línea de Regresión", x = "X", y = "Y (Cuadrática)") +
custom_theme
# Gráfico 4: Residuos vs valores predichos para relación cuadrática
plot4 <- ggplot(data_quadratic, aes(x = Fitted, y = Residuals)) +
geom_point(color = "#2C7FB8", size = 3, alpha = 0.8) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
labs(title = "Relación Cuadrática: Residuos vs Predicciones", x = "Valores Predichos", y = "Residuos Estandarizados") +
custom_theme
# Organizar los gráficos en una cuadrícula 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
