datos <- readRDS("~/GitHub/aadi2024/static/slides/data/datos.rds")
plot(datos$brecha, datos$promedio_anios_escolaridad25_2017)
?geom_smooth
ggplot(datos, aes(x = brecha, y = prop_ocup)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
x = "Brecha",
y = "Promedio de Años de Escolaridad (2017)",
title = "Relación entre Brecha y Promedio de Años de Escolaridad"
) +
theme_minimal()
View(datos)
summary(datos$brecha)
datos %>%
select(brecha)
library(dplyr)
datos %>%
select(brecha)
datos %>%
select(brecha) %>%
View()
library(ggplot2)
# Calcular la media de la brecha salarial
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
ggplot(datos, aes(x = seq_along(brecha), y = brecha)) +
geom_point(color = "#42affa", size = 3) +  # Puntos de datos
geom_hline(yintercept = mean_brecha, color = "red", linetype = "dashed", size = 1) +  # Línea de la media
geom_segment(aes(xend = seq_along(brecha), yend = mean_brecha), color = "#ffa500", size = 0.5) +  # Líneas desde cada punto hasta la media
labs(
x = "Índice",
y = "Brecha Salarial de Género (%)",
title = "Distancia de cada punto a la Media de la Brecha Salarial"
) +
theme_minimal(base_size = 14) +  # Tamaño de fuente base
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centra y pone en negrita el título
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
axis.text = element_text(color = "#333333"),  # Color del texto en los ejes
panel.grid.major = element_line(color = "#d3d3d3"),  # Color de las líneas de la cuadrícula mayor
panel.grid.minor = element_blank()  # Elimina las líneas de la cuadrícula menor
)
ggplot(datos[order(datos$brecha), ], aes(x = seq_along(brecha), y = brecha)) +
geom_point(color = "#42affa", size = 3) +  # Puntos de datos
geom_hline(yintercept = mean_brecha, color = "red", linetype = "dashed", size = 1) +  # Línea de la media
geom_segment(aes(xend = seq_along(brecha), yend = mean_brecha), color = "#ffa500", size = 0.5) +  # Líneas desde cada punto hasta la media
labs(
x = "Índice",
y = "Brecha Salarial de Género (%)",
title = "Distancia de cada punto a la Media de la Brecha Salarial"
) +
theme_minimal(base_size = 14) +  # Tamaño de fuente base
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centra y pone en negrita el título
axis.title = element_text(face = "bold"),  # Negrita para los títulos de los ejes
axis.text = element_text(color = "#333333"),  # Color del texto en los ejes
panel.grid.major = element_line(color = "#d3d3d3"),  # Color de las líneas de la cuadrícula mayor
panel.grid.minor = element_blank()  # Elimina las líneas de la cuadrícula menor
)
# Calcular la media de la variable 'brecha'
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
# Crear un dataframe con los pasos intermedios
tabla_calculos <- data.frame(
brecha = datos$brecha,                               # Columna original
diferencia = datos$brecha - mean_brecha,             # Diferencia con respecto a la media
diferencia_cuadrado = (datos$brecha - mean_brecha)^2 # Diferencia al cuadrado
)
# Agregar la columna que divide la diferencia al cuadrado por n-1
n <- nrow(datos)
tabla_calculos$varianza_parcial <- tabla_calculos$diferencia_cuadrado / (n - 1)
# Mostrar la tabla resultante
print(tabla_calculos)
# Crear un dataframe con los pasos intermedios
tabla_calculos <- data.frame(
brecha = datos$brecha,                               # Columna original
media = mean(datos$brecha, na.rm = TRUE)
diferencia = datos$brecha - mean_brecha,             # Diferencia con respecto a la media
# Crear un dataframe con los pasos intermedios
tabla_calculos <- data.frame(
brecha = datos$brecha,                               # Columna original
media = mean(datos$brecha, na.rm = TRUE),
diferencia = datos$brecha - mean_brecha,             # Diferencia con respecto a la media
diferencia_cuadrado = (datos$brecha - mean_brecha)^2 # Diferencia al cuadrado
)
round(tabla_calculos,2)
table(datos$brecha, useNA = "ifany")
datos <- readRDS("data/datos.rds") %>%
filter(brecha<40 & brecha > -20 & !is.na(brecha))
table(datos$brecha, useNA = "ifany")
tabla_calculos <- data.frame(
brecha = datos$brecha,                               # Columna original
media = mean(datos$brecha, na.rm = TRUE),
diferencia = datos$brecha - mean_brecha,             # Diferencia con respecto a la media
diferencia_cuadrado = (datos$brecha - mean_brecha)^2 ,# Diferencia al cuadrado
varianza = var(datos$brecha, na.rm = TRUE)
)
round(tabla_calculos,2)
sum(tabla_calculos$diferencia_cuadrado)
sum(tabla_calculos$diferencia_cuadrado)/nrow(datos)
sum(tabla_calculos$diferencia_cuadrado)/nrow(datos)-1
sum(tabla_calculos$diferencia_cuadrado)/(nrow(datos)-1)
sum(tabla_calculos$diferencia_cuadrado)
sqrt(89.94)
# Calcular la media de la brecha
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
# Crear la tabla con las columnas ajustadas
tabla_calculos <- data.frame(
comuna = datos$comuna,
Observaciones = datos$brecha,  # Columna de observaciones
Desviaciones = paste0(
round(datos$brecha, 3),
" - ",
round(mean_brecha, 3),
" = ",
round(datos$brecha - mean_brecha, 3)
),
`Desviaciones al cuadrado` = paste0(
"(",
round(datos$brecha - mean_brecha, 3),
")^2 = ",
round((datos$brecha - mean_brecha)^2, 3)
)
)
# Calcular la suma de las desviaciones al cuadrado para añadir una fila de totales
total_desviaciones_al_cuadrado <- sum((datos$brecha - mean_brecha)^2, na.rm = TRUE)
# Añadir una fila de totales
tabla_calculos <- rbind(
tabla_calculos,
c("Total", "", "0", paste0("= ", round(total_desviaciones_al_cuadrado, 3)))
)
# Mostrar la tabla resultante
print(tabla_calculos)
# Calcular la media de la brecha
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
# Crear la tabla con las columnas ajustadas
tabla_calculos <- data.frame(
comuna = datos$comuna,
Observaciones = round(datos$brecha,2),  # Columna de observaciones
Desviaciones = paste0(
round(datos$brecha, 2),
" - ",
round(mean_brecha, 2),
" = ",
round(datos$brecha - mean_brecha, 2)
),
`Desviaciones al cuadrado` = paste0(
"(",
round(datos$brecha - mean_brecha, 2),
")^2 = ",
round((datos$brecha - mean_brecha)^2, 2)
)
)
# Calcular la suma de las desviaciones al cuadrado para añadir una fila de totales
total_desviaciones_al_cuadrado <- sum((datos$brecha - mean_brecha)^2, na.rm = TRUE)
# Añadir una fila de totales
tabla_calculos <- rbind(
tabla_calculos,
c("Total", "", "0", paste0("= ", round(total_desviaciones_al_cuadrado, 2)))
)
# Mostrar la tabla resultante
print(tabla_calculos)
ggplot(datos, aes(x = brecha, y = promedio_anios_escolaridad25_2017)) +
geom_point(color = "#0073C2", size = 3, alpha = 0.7) +  # Puntos más grandes y ligeramente transparentes
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE) +  # Línea de tendencia en negro
geom_vline(xintercept = mean(datos$brecha, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'brecha'
geom_hline(yintercept = mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE), color = "red", linetype = "dotted", size = 1) +  # Línea roja punteada en la media de 'promedio_anios_escolaridad25_2017'
labs(
x = "Brecha Salarial de Género (%)",
y = "Promedio de Años de Escolaridad (2017)",
title = "Relación entre Brecha Salarial de Género y Promedio de Años de Escolaridad"
) +
theme_minimal(base_size = 16) +  # Tamaño base de letra aumentado
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Título centrado, en negrita y más grande
axis.title = element_text(face = "bold", size = 14),               # Títulos de los ejes en negrita y más grandes
axis.text = element_text(color = "#333333", size = 12),            # Texto de los ejes más grande
panel.grid.major = element_line(color = "#e0e0e0"),                # Líneas de la cuadrícula mayor en gris claro
panel.grid.minor = element_blank()                                 # Elimina las líneas de la cuadrícula menor
)
# Calcular la media y la desviación estándar de ambas variables
mean_x <- mean(datos$brecha, na.rm = TRUE)
mean_y <- mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
sd_x <- sd(datos$brecha, na.rm = TRUE)
sd_y <- sd(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
# Crear la tabla con los cálculos paso a paso
tabla_correlacion <- data.frame(
Observacion = 1:nrow(datos),
brecha = datos$brecha,  # Columna de valores de x
promedio_anios_escolaridad25_2017 = datos$promedio_anios_escolaridad25_2017,  # Columna de valores de y
brecha_estandarizada = (datos$brecha - mean_x) / sd_x,  # Columna de valores x estandarizados
escolaridad_estandarizada = (datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y,  # Columna de valores y estandarizados
Producto_estandarizado = ((datos$brecha - mean_x) / sd_x) * ((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y)  # Producto de las variables estandarizadas
)
library(dplyr)
library(ggplot2)
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
library(dplyr)
datos <- readRDS("data/datos.rds") %>%
filter(brecha<40 & brecha > -20 & !is.na(brecha))
library(ggplot2)
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
ggplot(datos, aes(x = brecha)) +
geom_histogram(
binwidth = 5,                    # Ajusta el ancho de las barras
fill = "#42affa",                # Color de relleno de las barras
color = "white",                 # Color de borde de las barras
alpha = 0.8                      # Transparencia de las barras
) +
geom_vline(
aes(xintercept = mean_brecha),
color = "red",                   # Color de la línea
linetype = "dashed",             # Tipo de línea (discontinua)
size = 1                         # Grosor de la línea
) +
labs(
x = "Brecha Salarial de Género (%)",
y = "Frecuencia",
title = "Distribución de la Brecha Salarial de Género por Comuna"
) +
theme_minimal(base_size = 14) +    # Tamaño de fuente base
theme(
plot.title = element_text(hjust = 0.5, face = "bold"), # Centra y pone en negrita el título
axis.title = element_text(face = "bold"),              # Negrita para los títulos de los ejes
axis.text = element_text(color = "#333333"),           # Color del texto de los ejes
panel.grid.major = element_line(color = "#d3d3d3"),    # Color de las líneas de la cuadrícula mayor
panel.grid.minor = element_blank()                     # Elimina las líneas de la cuadrícula menor
)
# Calcular la media y la desviación estándar de ambas variables
mean_x <- mean(datos$brecha, na.rm = TRUE)
mean_y <- mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
sd_x <- sd(datos$brecha, na.rm = TRUE)
sd_y <- sd(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
# Crear la tabla con los cálculos paso a paso
tabla_correlacion <- data.frame(
Observacion = 1:nrow(datos),
brecha = datos$brecha,  # Columna de valores de x
promedio_anios_escolaridad25_2017 = datos$promedio_anios_escolaridad25_2017,  # Columna de valores de y
brecha_estandarizada = (datos$brecha - mean_x) / sd_x,  # Columna de valores x estandarizados
escolaridad_estandarizada = (datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y,  # Columna de valores y estandarizados
Producto_estandarizado = ((datos$brecha - mean_x) / sd_x) * ((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y)  # Producto de las variables estandarizadas
)
# Mostrar la tabla resultante
print(tabla_correlacion)
# Calcular la media y la desviación estándar de ambas variables
mean_x <- mean(datos$brecha, na.rm = TRUE)
mean_y <- mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
sd_x <- sd(datos$brecha, na.rm = TRUE)
sd_y <- sd(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
# Crear la tabla con los cálculos paso a paso
tabla_correlacion <- data.frame(
Observacion = 1:nrow(datos),
brecha = round(datos$brecha, 2),  # Columna de valores de x redondeados
promedio_anios_escolaridad25_2017 = round(datos$promedio_anios_escolaridad25_2017, 2),  # Columna de valores de y redondeados
brecha_estandarizada = paste0("(", round(datos$brecha, 2), " - ", round(mean_x, 2), ") / ", round(sd_x, 2), " = ", round((datos$brecha - mean_x) / sd_x, 2)),  # Valores x estandarizados
escolaridad_estandarizada = paste0("(", round(datos$promedio_anios_escolaridad25_2017, 2), " - ", round(mean_y, 2), ") / ", round(sd_y, 2), " = ", round((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y, 2)),  # Valores y estandarizados
Producto_estandarizado = paste0("(", round((datos$brecha - mean_x) / sd_x, 2), ") * (", round((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y, 2), ") = ", round(((datos$brecha - mean_x) / sd_x) * ((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y), 2))  # Producto de las variables estandarizadas
)
# Mostrar la tabla resultante
print(tabla_correlacion)
head(tabla_correlacion )
# Crear la tabla con los cálculos paso a paso
tabla_correlacion <- data.frame(
Observacion = 1:nrow(datos),
brecha = round(datos$brecha, 2),  # Columna de valores de x redondeados
promedio_anios_escolaridad25_2017 = round(datos$promedio_anios_escolaridad25_2017, 2),  # Columna de valores de y redondeados
brecha_estandarizada = paste0("(", round(datos$brecha, 2), " - ", round(mean_x, 2), ") / ", round(sd_x, 2), " = ", round((datos$brecha - mean_x) / sd_x, 2)),  # Valores x estandarizados
escolaridad_estandarizada = paste0("(", round(datos$promedio_anios_escolaridad25_2017, 2), " - ", round(mean_y, 2), ") / ", round(sd_y, 2), " = ", round((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y, 2)),  # Valores y estandarizados
Producto_estandarizado = paste0("(", round((datos$brecha - mean_x) / sd_x, 2), ") * (", round((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y, 2), ") = ", round(((datos$brecha - mean_x) / sd_x) * ((datos$promedio_anios_escolaridad25_2017 - mean_y) / sd_y), 2))  # Producto de las variables estandarizadas
)
head(tabla_correlacion)
cor(datos$brecha, datos$promedio_anios_escolaridad25_2017)
# 1. Calcular las medias de las variables
mean_brecha <- mean(datos$brecha, na.rm = TRUE)
mean_escolaridad <- mean(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
# 2. Calcular las desviaciones estándar de las variables
sd_brecha <- sd(datos$brecha, na.rm = TRUE)
sd_escolaridad <- sd(datos$promedio_anios_escolaridad25_2017, na.rm = TRUE)
# 3. Calcular las desviaciones estandarizadas
brecha_estandarizada <- (datos$brecha - mean_brecha) / sd_brecha
escolaridad_estandarizada <- (datos$promedio_anios_escolaridad25_2017 - mean_escolaridad) / sd_escolaridad
# 4. Calcular el producto de las desviaciones estandarizadas
producto_estandarizado <- brecha_estandarizada * escolaridad_estandarizada
# 5. Calcular la correlación sumando los productos estandarizados y dividiendo por n-1
n <- sum(!is.na(datos$brecha) & !is.na(datos$promedio_anios_escolaridad25_2017))  # Contar observaciones no NA
correlacion_manual <- sum(producto_estandarizado, na.rm = TRUE) / (n - 1)
# Mostrar el resultado
correlacion_manual
cor(datos$brecha, datos$promedio_anios_escolaridad25_2017)
sum(producto_estandarizado, na.rm = TRUE)
(n - 1)
# Mostrar el resultado
correlacion_manual
library(ggplot2)
library(gridExtra)
# Función para crear un conjunto de datos con una correlación específica
crear_datos <- function(n, cor) {
x <- rnorm(n)
y <- cor * x + sqrt(1 - cor^2) * rnorm(n)
data.frame(x = x, y = y)
}
# Crear seis conjuntos de datos con diferentes correlaciones
set.seed(42)
datos_0 <- crear_datos(100, 0)
datos_neg03 <- crear_datos(100, -0.3)
datos_pos05 <- crear_datos(100, 0.5)
datos_neg07 <- crear_datos(100, -0.7)
datos_pos09 <- crear_datos(100, 0.9)
datos_neg099 <- crear_datos(100, -0.99)
# Crear los gráficos individuales
g0 <- ggplot(datos_0, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = 0") +
theme_minimal()
g_neg03 <- ggplot(datos_neg03, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = -0.3") +
theme_minimal()
g_pos05 <- ggplot(datos_pos05, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = 0.5") +
theme_minimal()
g_neg07 <- ggplot(datos_neg07, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = -0.7") +
theme_minimal()
g_pos09 <- ggplot(datos_pos09, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = 0.9") +
theme_minimal()
g_neg099 <- ggplot(datos_neg099, aes(x = x, y = y)) +
geom_point() +
labs(title = "Correlación r = -0.99") +
theme_minimal()
# Organizar los gráficos en una cuadrícula 3x2
grid.arrange(g0, g_neg03, g_pos05, g_neg07, g_pos09, g_neg099, ncol = 2)
# Crear datos con diferentes correlaciones
set.seed(123)
# Correlación cercana a 0
x1 <- rnorm(100)
y1 <- rnorm(100)
# Correlación cercana a -0.3
x2 <- rnorm(100)
y2 <- -0.3*x2 + rnorm(100)
# Correlación cercana a 0.5
x3 <- rnorm(100)
y3 <- 0.5*x3 + rnorm(100, sd=0.5)
# Correlación cercana a -0.7
x4 <- rnorm(100)
y4 <- -0.7*x4 + rnorm(100, sd=0.3)
# Correlación cercana a 0.9
x5 <- rnorm(100)
y5 <- 0.9*x5 + rnorm(100, sd=0.1)
# Correlación cercana a -0.99
x6 <- rnorm(100)
y6 <- -0.99*x6 + rnorm(100, sd=0.05)
# Crear gráficos individuales
plot1 <- ggplot(data.frame(x=x1, y=y1), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = 0") + theme_minimal()
plot2 <- ggplot(data.frame(x=x2, y=y2), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = -0.3") + theme_minimal()
plot3 <- ggplot(data.frame(x=x3, y=y3), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = 0.5") + theme_minimal()
plot4 <- ggplot(data.frame(x=x4, y=y4), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = -0.7") + theme_minimal()
plot5 <- ggplot(data.frame(x=x5, y=y5), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = 0.9") + theme_minimal()
plot6 <- ggplot(data.frame(x=x6, y=y6), aes(x=x, y=y)) +
geom_point() + labs(title="Correlación r = -0.99") + theme_minimal()
# Organizar los gráficos en un grid 3x2
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol = 2)
# Función para crear un conjunto de datos con una correlación específica
crear_datos <- function(n, cor) {
x <- rnorm(n)
y <- cor * x + sqrt(1 - cor^2) * rnorm(n)
data.frame(x = x, y = y)
}
# Crear seis conjuntos de datos con diferentes correlaciones
set.seed(42)
datos_0 <- crear_datos(100, 0)
datos_neg03 <- crear_datos(100, -0.3)
datos_pos05 <- crear_datos(100, 0.5)
datos_neg07 <- crear_datos(100, -0.7)
datos_pos09 <- crear_datos(100, 0.9)
datos_neg099 <- crear_datos(100, -0.99)
# Función para crear gráficos con líneas de la media
crear_grafico <- function(data, title) {
ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = mean(data$x), color = "red", linetype = "dotted") +  # Línea vertical para la media de x
geom_hline(yintercept = mean(data$y), color = "red", linetype = "dotted") +  # Línea horizontal para la media de y
labs(title = title) +
theme_minimal()
}
# Crear los gráficos individuales con líneas de la media
g0 <- crear_grafico(datos_0, "Correlación r = 0")
g_neg03 <- crear_grafico(datos_neg03, "Correlación r = -0.3")
g_pos05 <- crear_grafico(datos_pos05, "Correlación r = 0.5")
g_neg07 <- crear_grafico(datos_neg07, "Correlación r = -0.7")
g_pos09 <- crear_grafico(datos_pos09, "Correlación r = 0.9")
g_neg099 <- crear_grafico(datos_neg099, "Correlación r = -0.99")
# Organizar los gráficos en una cuadrícula 3x2
grid.arrange(g0, g_neg03, g_pos05, g_neg07, g_pos09, g_neg099, ncol = 2)
